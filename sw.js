this.version = "2025.06.08.31";
console.log("SW:" + version + " - online.");
const CACHE_NAME = "sw-cache-v" + version;

// All cacheable files are now managed through self.cacheManifest at the bottom of this file
// This includes critical, important, page-specific, and lazy (previously skipped) files
// The manifest is auto-generated by generate-cache-manifest.sh with checksums and priorities

// Cache management flags
let priorityTwoCached = false;
let backgroundCacheInProgress = false;

self.nftscripts = {};
const scriptPromises = {}; // Store ongoing fetch promises

self.addEventListener("install", function (event) {

    event.waitUntil(
        smartCacheInstall()
            .then(() => {
                // Skip waiting to activate immediately for faster updates
                return self.skipWaiting();
            })
            .catch(error => {
                console.error('SW: Smart cache installation failed:', error);
                throw error;
            })
    );
});

// Helper function to notify all clients
function notifyClients(message) {
    self.clients.matchAll({ includeUncontrolled: true, type: 'window' })
        .then(clients => {
            clients.forEach(client => {
                client.postMessage(message);
            });
        })
        .catch(error => console.error('Failed to notify clients:', error));
}

// Smart cache installation with checksum comparison
async function smartCacheInstall() {
    const newCache = await caches.open(CACHE_NAME);
    
    // Check if we have a cache manifest with checksums
    if (!self.cacheManifest || !self.cacheManifest.files) {
        console.error("SW: self.cacheManifest is required for smart caching");
        return;
    }
    // Get previous cache if it exists
    const oldCacheNames = await caches.keys();
    const oldCacheName = oldCacheNames.find(name => name.startsWith('sw-cache-v') && name !== CACHE_NAME);
    const oldCache = oldCacheName ? await caches.open(oldCacheName) : null;
    
    // Process files by priority: critical first, then important, then page-specific
    const criticalFiles = Object.entries(self.cacheManifest.files)
        .filter(([url, info]) => info.priority === 'critical');
    const importantFiles = Object.entries(self.cacheManifest.files)
        .filter(([url, info]) => info.priority === 'important');
    const pageSpecificFiles = Object.entries(self.cacheManifest.files)
        .filter(([url, info]) => info.priority === 'page-specific');
    
    // Process critical files first
    const criticalStats = await processCacheFiles(criticalFiles, newCache, oldCache, 'critical');
    
    // Schedule important and page-specific files for background processing
    setTimeout(() => {
        Promise.all([
            processCacheFiles(importantFiles, newCache, oldCache, 'important'),
            processCacheFiles(pageSpecificFiles, newCache, oldCache, 'page-specific')
        ]).then(([importantStats, pageStats]) => {
            
            // Calculate total stats
            const totalStats = {
                transferred: (criticalStats.transferred || 0) + (importantStats.transferred || 0) + (pageStats.transferred || 0),
                downloaded: (criticalStats.downloaded || 0) + (importantStats.downloaded || 0) + (pageStats.downloaded || 0)
            };
            
            // Mark priority two as cached to prevent old system from running
            priorityTwoCached = true;
            
            notifyClients({ 
                type: 'SMART_CACHE_COMPLETE',
                data: { stats: totalStats }
            });
        }).catch(error => {
            console.error("SW: Background smart caching failed:", error);
            notifyClients({ type: 'ERROR', data: { message: 'Smart cache failed' } });
        });
    }, 1000);
}

// Process cache files with smart checksum comparison
async function processCacheFiles(fileEntries, newCache, oldCache, priority) {
    let transferredCount = 0;
    let downloadedCount = 0;
    
    for (const [url, fileInfo] of fileEntries) {
        try {
            let needsDownload = true;
            
            // Check if file exists in old cache with same checksum
            if (oldCache) {
                const oldResponse = await oldCache.match(url);
                if (oldResponse) {
                    const oldChecksum = oldResponse.headers.get('x-cache-checksum');
                    if (oldChecksum === fileInfo.checksum) {
                        // Checksums match, transfer from old cache
                        const responseToTransfer = oldResponse.clone();
                        await newCache.put(url, responseToTransfer);
                        transferredCount++;
                        needsDownload = false;
                    }
                }
            }
            
            if (needsDownload) {
                // Download new/changed file
                try {
                    const response = await fetch(url);
                    if (response && response.ok) {
                        // Add checksum header for future comparisons
                        const responseToCache = new Response(response.body, {
                            status: response.status,
                            statusText: response.statusText,
                            headers: {
                                ...Object.fromEntries(response.headers.entries()),
                                'x-cache-checksum': fileInfo.checksum,
                                'x-cache-size': fileInfo.size.toString()
                            }
                        });
                        await newCache.put(url, responseToCache);
                        downloadedCount++;
                    }
                } catch (fetchError) {
                    console.warn(`SW: Failed to cache ${url}:`, fetchError);
                }
            }
        } catch (error) {
            console.warn(`SW: Error processing ${url}:`, error);
        }
    }
    return { transferred: transferredCount, downloaded: downloadedCount };
}

// Background caching of important resources (fallback for when smart caching is not available)
function scheduleBackgroundCache() {
    if (backgroundCacheInProgress || priorityTwoCached) return;
    
    // Only use fallback caching if no smart cache manifest is available
    if (self.cacheManifest && self.cacheManifest.files) {
        return;
    }
    
    backgroundCacheInProgress = true;

    // Use setTimeout to avoid blocking the install event
    setTimeout(() => {
        cacheImportantResources();
    }, 1000);
}

async function cacheImportantResources() {
    if (priorityTwoCached) return;

    try {
        const cache = await caches.open(CACHE_NAME);

        // Notify clients that caching has started
        self.clients.matchAll({ includeUncontrolled: true, type: 'window' })
            .then(clients => {
                clients.forEach(client => {
                    client.postMessage({ type: 'CACHE_STARTED' });
                });
            })
            .catch(error => console.error('Failed to notify clients of cache start:', error));

        // Fallback caching is no longer needed - all files are managed through cacheManifest
        
        priorityTwoCached = true;
        
        // Notify all clients that caching is complete
        self.clients.matchAll({ includeUncontrolled: true, type: 'window' })
            .then(clients => {
                clients.forEach(client => {
                    client.postMessage({ type: 'CACHE_COMPLETE' });
                });
            })
            .catch(error => console.error('Failed to notify clients of cache completion:', error));
    } catch (error) {
        console.error('SW: Background caching failed:', error);

        // Notify clients of caching error
        self.clients.matchAll({ includeUncontrolled: true, type: 'window' })
            .then(clients => {
                clients.forEach(client => {
                    client.postMessage({ type: 'ERROR', data: { message: 'Background caching failed' } });
                });
            })
            .catch(err => console.error('Failed to notify clients of cache error:', err));
    } finally {
        backgroundCacheInProgress = false;
    }
}

// Cache page-specific resources on navigation
async function cachePageResources(pathname) {
    const cache = await caches.open(CACHE_NAME);

    // Get page-specific resources from cacheManifest
    if (!self.cacheManifest || !self.cacheManifest.files) {
        return;
    }

    // Get all page-specific files from the manifest
    const pageSpecificFiles = Object.entries(self.cacheManifest.files)
        .filter(([url, info]) => info.priority === 'page-specific')
        .map(([url, info]) => url);

    // For now, cache all page-specific files when navigating to any page
    // This could be optimized later to be more selective based on pathname
    let resourcesToCache = pageSpecificFiles;

    if (resourcesToCache.length > 0) {
        try {
            // Check which resources aren't already cached
            const uncachedResources = [];
            for (const resource of resourcesToCache) {
                const cached = await cache.match(resource);
                if (!cached) {
                    uncachedResources.push(resource);
                }
            }

            if (uncachedResources.length > 0) {
                // Cache in smaller batches
                const batchSize = 5;
                for (let i = 0; i < uncachedResources.length; i += batchSize) {
                    const batch = uncachedResources.slice(i, i + batchSize);
                    try {
                        await cache.addAll(batch);
                    } catch (error) {
                        console.warn('SW: Some page-specific resources failed to cache:', error);
                    }
                }
            }
        } catch (error) {
            console.warn('SW: Page-specific caching failed:', error);
        }
    }
}

self.addEventListener('fetch', function (event) {
    const url = new URL(event.request.url);

    // Trigger page-specific caching for same-origin navigations
    if (url.origin === self.location.origin && event.request.mode === 'navigate') {
        // Don't await this - let it run in background
        cachePageResources(url.pathname).catch(error =>
            console.warn('SW: Page-specific caching failed:', error)
        );
    }

    if (url.hostname === 'api.coingecko.com') {
        event.respondWith(
            caches.open(CACHE_NAME).then(async cache => {
                const request = event.request;
                const CACHE_MAX_AGE_MS = 15 * 60 * 1000; // 15 minutes

                const cachedResponse = await cache.match(request);

                if (cachedResponse) {
                    const timestampHeader = cachedResponse.headers.get('sw-cache-timestamp');
                    if (timestampHeader) {
                        const cachedTime = parseInt(timestampHeader, 10);
                        if (Date.now() - cachedTime < CACHE_MAX_AGE_MS) {
                            return cachedResponse;
                        }
                    }
                }
                try {
                    const networkResponse = await fetch(request);
                    if (networkResponse && networkResponse.ok) {
                        const responseToCache = networkResponse.clone();
                        const newHeaders = new Headers(responseToCache.headers);
                        newHeaders.set('sw-cache-timestamp', Date.now().toString());
                        const body = await responseToCache.arrayBuffer();

                        const cacheableResponse = new Response(body, {
                            status: responseToCache.status,
                            statusText: responseToCache.statusText,
                            headers: newHeaders
                        });

                        cache.put(request, cacheableResponse)
                        return networkResponse
                    } else {
                        if (cachedResponse) {
                            return cachedResponse;
                        }
                        return networkResponse || new Response(JSON.stringify({ error: 'CoinGecko API request failed to fetch and no cache available' }), {
                            status: 503,
                            statusText: 'Service Unavailable',
                            headers: { 'Content-Type': 'application/json' }
                        });
                    }
                } catch (error) {
                    console.error(`SW: Fetch error for ${request.url}:`, error);
                    if (cachedResponse) {
                        return cachedResponse;
                    }
                    return new Response(JSON.stringify({ error: 'CoinGecko API request failed due to network error and no cache available' }), {
                        status: 503,
                        statusText: 'Service Unavailable',
                        headers: { 'Content-Type': 'application/json' }
                    });
                }
            })
        );
        return
    }

    if (url.origin !== self.location.origin) {
        // For specific external resources we want to handle
        if (url.pathname.endsWith('.m4v')) { // MODIFIED: Removed "|| url.hostname === 'api.coingecko.com'"
            event.respondWith(
                fetch(event.request)
                    .catch(error => {
                        console.error('Network error for external resource:', event.request.url, error);
                        return new Response(null, { status: 503 }); // Service Unavailable
                    })
            );
        }
        return; // Let browser handle all other external requests
    }

    // Handle routing rules from Caddyfile for same-origin requests
    event.respondWith(handleRouting(event.request));
});

// Handle routing based on Caddyfile rules
async function handleRouting(request) {
    const url = new URL(request.url);
    const pathname = url.pathname;

    // Helper function to try serving a static file, fallback to rewrite
    async function tryStaticOrRewrite(rewriteTarget) {
        // First try to get the exact file from cache
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            return cachedResponse;
        }

        // Try to fetch the exact file from network
        try {
            const networkResponse = await fetch(request);
            if (networkResponse && networkResponse.ok) {
                // Cache the response
                const responseToCache = networkResponse.clone();
                caches.open(CACHE_NAME)
                    .then(cache => {
                        cache.put(request, responseToCache)
                            .catch(error => console.error('Cache put failed:', request.url, error));
                    });
                return networkResponse;
            }
        } catch (error) {
        }

        // File doesn't exist, rewrite to target
        const rewriteRequest = new Request(rewriteTarget, {
            method: request.method,
            headers: request.headers,
            body: request.method === 'GET' ? null : request.body,
            credentials: request.credentials,
            cache: request.cache,
            redirect: request.redirect,
            referrer: request.referrer
        });

        return cacheFirstStrategy(rewriteRequest);
    }

    // Handle /nfts/set/* -> rewrite to /nfts/set/index.html if file doesn't exist
    if (pathname.startsWith('/nfts/set/')) {
        return tryStaticOrRewrite('/nfts/set/index.html');
    }

    // Handle /@* -> rewrite to /user/index.html if file doesn't exist
    // Note: Bot handling with reverse proxy is not implemented in SW (can't proxy to 127.0.0.1:3000)
    if (pathname.startsWith('/@')) {
        return tryStaticOrRewrite('/user/index.html');
    }

    // Handle /me* -> rewrite to /user/index.html
    if (pathname.startsWith('/me')) {
        const rewriteRequest = new Request('/user/index.html', {
            method: request.method,
            headers: request.headers,
            body: request.method === 'GET' ? null : request.body,
            credentials: request.credentials,
            cache: request.cache,
            redirect: request.redirect,
            referrer: request.referrer
        });
        return cacheFirstStrategy(rewriteRequest);
    }

    // Handle /vr/@* -> rewrite to /vr/index.html
    if (pathname.startsWith('/vr/@')) {
        const rewriteRequest = new Request('/vr/index.html', {
            method: request.method,
            headers: request.headers,
            body: request.method === 'GET' ? null : request.body,
            credentials: request.credentials,
            cache: request.cache,
            redirect: request.redirect,
            referrer: request.referrer
        });
        return cacheFirstStrategy(rewriteRequest);
    }



    // Handle /dlux/* -> rewrite to /dlux/index.html if file doesn't exist
    // Note: Bot handling with reverse proxy is not implemented in SW
    if (pathname.startsWith('/dlux/')) {
        return tryStaticOrRewrite('/dlux/index.html');
    }

    // Handle /blog/* -> rewrite to /blog/index.html if file doesn't exist
    // Note: Bot handling with reverse proxy is not implemented in SW
    if (pathname.startsWith('/blog/')) {
        return tryStaticOrRewrite('/blog/index.html');
    }

    // Default cache-first strategy for all other requests
    return cacheFirstStrategy(request);
}

// Cache-first strategy implementation
async function cacheFirstStrategy(request) {
    const url = new URL(request.url);

    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
        return cachedResponse;
    }

    try {
        const networkResponse = await fetch(request);

        if (!networkResponse) {
            console.error('SW: No network response for:', url.pathname);
            return new Response('Service Unavailable', { status: 503 });
        }

        if (networkResponse.status !== 200) {
            console.warn('SW: Non-200 response for:', url.pathname, 'Status:', networkResponse.status);
            return networkResponse;
        }

        const responseToCache = networkResponse.clone();
        caches.open(CACHE_NAME)
            .then(cache => {
                cache.put(request, responseToCache)
                    .catch(error => console.error('SW: Cache put failed:', request.url, error));
            });

        return networkResponse;
    } catch (error) {
        console.error('SW: Network error for:', request.url, error);
        // Try to return a more helpful error page
        return new Response(`
            <html>
                <body>
                    <h1>Service Unavailable</h1>
                    <p>Unable to load ${url.pathname}</p>
                    <p>Error: ${error.message}</p>
                    <p>Please check your connection and try again.</p>
                </body>
            </html>
        `, {
            status: 503,
            statusText: 'Service Unavailable',
            headers: { 'Content-Type': 'text/html' }
        });
    }
}

self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting()
            .then(() => {
                return self.clients.claim();
            })
            .then(() => {
                return self.clients.matchAll({ includeUncontrolled: true, type: 'window' });
            })
            .then(clients => {
                clients.forEach(client => {
                    client.postMessage({ type: 'SW_UPDATED' });
                });
            })
            .catch(err => console.error('Skip waiting or claim failed:', err));
    }
});

self.addEventListener("activate", function (event) {
    event.waitUntil(
        Promise.all([
            caches.keys().then(cacheNames => {
                return Promise.all(
                    cacheNames
                        .filter(cacheName => cacheName !== CACHE_NAME)
                        .map(cacheName => {
                            return caches.delete(cacheName);
                        })
                );
            }),
            self.clients.claim()
        ])
            .then(() => {
                return self.clients.matchAll({ includeUncontrolled: true, type: 'window' });
            })
            .then(clients => {
                clients.forEach(client => {
                    client.postMessage({ type: 'SW_UPDATED' });
                });

                // Start background caching of important resources after activation (fallback only)
                scheduleBackgroundCache();
            })
            .catch(error => console.error('Activation failed:', error))
    );
});

// NFT script handling
self.addEventListener("message", function (e) {
    const message = e.data, p = e.source;
    switch (message.id) {
        case "callScript":
            callScript(message.o, p);
            break;
        default:
            console.log("SW msg:", message);
    }
});

function callScript(o, p) {
    if (self.nftscripts[o.script] && self.nftscripts[o.script] !== "Loading...") {
        const code = `(//${self.nftscripts[o.script]}\n)("${o.uid ? o.uid : 0}")`;
        const computed = eval(code);
        computed.uid = o.uid || "";
        computed.owner = o.owner || "";
        computed.script = o.script;
        computed.setname = o.set;
        computed.token = o.token;
        p.postMessage(computed);
    } else {
        pullScript(o.script).then(() => callScript(o, p));
    }
}

function pullScript(id) {
    if (self.nftscripts[id] && self.nftscripts[id] !== "Loading...") {
        return Promise.resolve("OK");
    } else if (scriptPromises[id]) {
        return scriptPromises[id];
    } else {
        scriptPromises[id] = fetch(`https://ipfs.dlux.io/ipfs/${id}`)
            .then(response => response.text())
            .then(data => {
                self.nftscripts[id] = data;
                delete scriptPromises[id];
                return "OK";
            })
            .catch(error => {
                console.error('Failed to fetch script:', id, error);
                delete scriptPromises[id];
                throw error;
            });
            return scriptPromises[id];
    }
}

// Helper function to format bytes
function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Cache manifest with checksums - auto-generated
self.cacheManifest = 
{
  "version": "2025.06.08.31",
  "generated": "2025-06-08T06:17:08Z",
  "files": {
    "/js/codemirror.min.js": {
      "checksum": "2263911552d33d0cf4e43b1ea01413bb",
      "size": 170531,
      "priority": "important"
    },
    "/js/contract-modal.js": {
      "checksum": "dbda483d9c74348cb2603cebdae6b3aa",
      "size": 16489,
      "priority": "important"
    },
    "/js/contracts-vue.js": {
      "checksum": "b899714dba558ff0d0e72e45263a2e72",
      "size": 109106,
      "priority": "important"
    },
    "/js/cryptojs.min.js": {
      "checksum": "d9c6de0df2bf028d93924aff92487904",
      "size": 60819,
      "priority": "important"
    },
    "/js/cycler.js": {
      "checksum": "f664b76697d2f4b76bf776284f491c4e",
      "size": 1118,
      "priority": "important"
    },
    "/js/dataCommon.js": {
      "checksum": "f38ec95a53d917b4e2d7fe983646d5ea",
      "size": 229,
      "priority": "important"
    },
    "/js/dd.js": {
      "checksum": "359b73a60da7efe421181249ece6f7d2",
      "size": 9257,
      "priority": "important"
    },
    "/js/detailvue.js": {
      "checksum": "1699b722740d82f293604e4879ea5b03",
      "size": 29578,
      "priority": "important"
    },
    "/js/dexvue.js": {
      "checksum": "0a2809aeee5eb1af609bf1bbc84a48bc",
      "size": 50115,
      "priority": "important"
    },
    "/js/diff.js": {
      "checksum": "e771e221748d27a961486d5df12b2471",
      "size": 81155,
      "priority": "important"
    },
    "/js/drag-drop.js": {
      "checksum": "0ec92c44489e6ffbf6ec1234caf84942",
      "size": 13295,
      "priority": "important"
    },
    "/js/drag-sort.js": {
      "checksum": "836d807e5e29d1b90376b008e55ceaa5",
      "size": 2360,
      "priority": "important"
    },
    "/js/election-modal.js": {
      "checksum": "0c3689e8d2efdfd9c11d836bada0d1c8",
      "size": 7480,
      "priority": "important"
    },
    "/js/extend-modal.js": {
      "checksum": "ba61609ef1242c095935a6d60bec203d",
      "size": 6111,
      "priority": "important"
    },
    "/js/extensionvue.js": {
      "checksum": "cde30ba037aeae53a61b4f099dc1c870",
      "size": 18670,
      "priority": "important"
    },
    "/js/filesvue-dd.js": {
      "checksum": "23f8989d1093455129851ec4909295ec",
      "size": 268000,
      "priority": "important"
    },
    "/js/filesvue.js": {
      "checksum": "ad5f3e0cdcf7e68466df43ee9019324d",
      "size": 91094,
      "priority": "important"
    },
    "/js/footvue.js": {
      "checksum": "bfbf2e784a2d1ca7f149a08398bc474c",
      "size": 1333,
      "priority": "important"
    },
    "/js/fttransfer.js": {
      "checksum": "ff5ac6045a4c04aafa46864a8edd4ab2",
      "size": 73613,
      "priority": "important"
    },
    "/js/hive-modal.js": {
      "checksum": "ea94f917f11b19610b6f01efd2935717",
      "size": 32362,
      "priority": "important"
    },
    "/js/img-ipfs.js": {
      "checksum": "c29daa440ebbab74b34d47cbbdcd59f1",
      "size": 2340,
      "priority": "important"
    },
    "/js/indexvue.js": {
      "checksum": "361f81aaa9cf5523af1a4e8a03e53267",
      "size": 28461,
      "priority": "important"
    },
    "/js/marker.js": {
      "checksum": "c2198bba963f1d95ef8e9787875a0eb7",
      "size": 4540,
      "priority": "important"
    },
    "/js/mde.js": {
      "checksum": "53b8c9f226da2c3a3a3b3b2ffa21abac",
      "size": 999,
      "priority": "important"
    },
    "/js/methods-common.js": {
      "checksum": "96b6e13042fa0c45e93d9fe671489a90",
      "size": 30885,
      "priority": "important"
    },
    "/js/methods-modals.js": {
      "checksum": "f08a459f5f5c673932b1c1cd51540e0b",
      "size": 1066,
      "priority": "important"
    },
    "/js/methods-spk.js": {
      "checksum": "e434298a33d0318e41336bcdf551e567",
      "size": 7542,
      "priority": "important"
    },
    "/js/mfi-vue.js": {
      "checksum": "7fbd69d4f3b44ab70507017b7cb61e94",
      "size": 15064,
      "priority": "important"
    },
    "/js/modal-manager.js": {
      "checksum": "051b4cf0394772b91ff1ff0a8a507de0",
      "size": 5286,
      "priority": "important"
    },
    "/js/modalvue.js": {
      "checksum": "a4bcca7b454c2bd1307fb0f70578f6c1",
      "size": 42673,
      "priority": "important"
    },
    "/js/model-viewer.min.js": {
      "checksum": "dd677b435b16f44e4ca08a9f354bac24",
      "size": 955555,
      "priority": "important"
    },
    "/js/nav.js": {
      "checksum": "7ec38d3ee084cc52ed87ba82bad4d563",
      "size": 27637,
      "priority": "important"
    },
    "/js/navue.js": {
      "checksum": "cc57a50722e2c1b2c3c5a19383b79e16",
      "size": 47919,
      "priority": "important"
    },
    "/js/nftcard.js": {
      "checksum": "eab916cf74635206cdd5cd2d9f7382ca",
      "size": 18323,
      "priority": "important"
    },
    "/js/nftdetail.js": {
      "checksum": "470766883c33ae998ec14ed2b92a4b4e",
      "size": 75619,
      "priority": "important"
    },
    "/js/nftsvue.js": {
      "checksum": "5d644469cc5fd72a991fc3b934768f73",
      "size": 98228,
      "priority": "important"
    },
    "/js/onlyhash.js": {
      "checksum": "ce57237fd9402179b8dfd8ef7aa1e1be",
      "size": 707437,
      "priority": "important"
    },
    "/js/pop-frame.js": {
      "checksum": "679aed3281bcee07fb3942a985e7dbbe",
      "size": 904,
      "priority": "important"
    },
    "/js/pop.js": {
      "checksum": "679aed3281bcee07fb3942a985e7dbbe",
      "size": 904,
      "priority": "important"
    },
    "/js/postvue.js": {
      "checksum": "8c6caf95fc7468acc3d66d01e3f5af4f",
      "size": 13853,
      "priority": "important"
    },
    "/js/purify.min.js": {
      "checksum": "6d6eab0b233005b7be97072e5b9e1011",
      "size": 21490,
      "priority": "important"
    },
    "/js/ratings.js": {
      "checksum": "4f26b88271c105408b4864bf8a2f41fc",
      "size": 1651,
      "priority": "important"
    },
    "/js/replies.js": {
      "checksum": "7a3fe8dfbeb99e599bd57c6693ed2251",
      "size": 7245,
      "priority": "important"
    },
    "/js/scene.js": {
      "checksum": "aaed69b3bd0a5b44f45e4b3b3f773510",
      "size": 53733,
      "priority": "important"
    },
    "/js/session.js": {
      "checksum": "19fe354a509a25a48a47ae622f4c998e",
      "size": 48412,
      "priority": "important"
    },
    "/js/setcard.js": {
      "checksum": "a2f10e9bed812046f0d49a8a6a339d6f",
      "size": 2890,
      "priority": "important"
    },
    "/js/showdown.js": {
      "checksum": "c619f8b780850eff22845d1091cfa776",
      "size": 3760,
      "priority": "important"
    },
    "/js/spk-js.js": {
      "checksum": "f5907a46fadd42a17504c9aa6a4978b8",
      "size": 564485,
      "priority": "important"
    },
    "/js/spk-wallet.js": {
      "checksum": "cf351a48a612547603168581852e5f91",
      "size": 70890,
      "priority": "important"
    },
    "/js/spkdrive.js": {
      "checksum": "97047ec81b39402b32f781e847e77018",
      "size": 82535,
      "priority": "important"
    },
    "/js/spkvue.js": {
      "checksum": "383f1b410ce7ceb6210f7b4227e8f894",
      "size": 92248,
      "priority": "important"
    },
    "/js/standard-modal.js": {
      "checksum": "5293322d7f75e2e2f70eb203c644230d",
      "size": 7356,
      "priority": "important"
    },
    "/js/stwidget.js": {
      "checksum": "0b8f564f8fc83e2587d7cdd557330753",
      "size": 25863,
      "priority": "important"
    },
    "/js/sw-monitor.js": {
      "checksum": "31c28bc7c227d74433e0445301329094",
      "size": 36317,
      "priority": "important"
    },
    "/js/tagify.min.js": {
      "checksum": "245e4e1b9c956dbebd6b52a595eabd79",
      "size": 59697,
      "priority": "important"
    },
    "/js/tagifyvue.js": {
      "checksum": "8c083377956e9a936f47a35f45afc951",
      "size": 1127,
      "priority": "important"
    },
    "/js/toastvue.js": {
      "checksum": "15a042f49546393a84afe492cbe516d3",
      "size": 2374,
      "priority": "important"
    },
    "/js/trading-vue.min.js": {
      "checksum": "6e6bb2f8dd6f94e2c8656759eafc1a26",
      "size": 264037,
      "priority": "important"
    },
    "/js/upload-everywhere.js": {
      "checksum": "a0455b92bdad32d2e0679d651f05a48d",
      "size": 16936,
      "priority": "important"
    },
    "/js/uploadvue-dd.js": {
      "checksum": "393a5bcfcf63a05d13ce0f2e3773590e",
      "size": 84439,
      "priority": "important"
    },
    "/js/uploadvue.js": {
      "checksum": "a24c372511a3865e52d1194b8af5bfac",
      "size": 63528,
      "priority": "important"
    },
    "/js/uuidv.js": {
      "checksum": "e64fbbb49c9b48c9fb15e778de8d86ad",
      "size": 1105,
      "priority": "important"
    },
    "/js/v3-app.js": {
      "checksum": "4d7919c210198f0ac40a9f92a69e42d4",
      "size": 46537,
      "priority": "important"
    },
    "/js/v3-dex.js": {
      "checksum": "e4615048077bf0346e5be62a65600d20",
      "size": 49482,
      "priority": "important"
    },
    "/js/v3-hub.js": {
      "checksum": "a25d9ccfccd050000ecc2e627619ff30",
      "size": 66867,
      "priority": "important"
    },
    "/js/v3-index.js": {
      "checksum": "6db5a77aba0ee262f320bee19631126c",
      "size": 28739,
      "priority": "important"
    },
    "/js/v3-nfts.js": {
      "checksum": "2742bf4ebcdf031fd3d557ed0c7213ac",
      "size": 98024,
      "priority": "important"
    },
    "/js/v3-qr.js": {
      "checksum": "4fe77a5fd772ecd3335312c5fbe64aa2",
      "size": 128576,
      "priority": "important"
    },
    "/js/v3-user.js": {
      "checksum": "9d4a3993c972861189438ff38cba094f",
      "size": 212978,
      "priority": "important"
    },
    "/js/vote.js": {
      "checksum": "1a7b77e81743317a96abae74a0ed4985",
      "size": 6049,
      "priority": "important"
    },
    "/js/voting-modal.js": {
      "checksum": "10fae48422e8e57ca87422eeeae572e2",
      "size": 7220,
      "priority": "important"
    },
    "/js/vrvue.js": {
      "checksum": "31e8b69c9bee400abf4603e754e600e3",
      "size": 44273,
      "priority": "important"
    },
    "/js/vueme.js": {
      "checksum": "1de60fa4460c253f680d0da4f2edb24a",
      "size": 149952,
      "priority": "important"
    },
    "/js/vueqr.js": {
      "checksum": "e5e2b75ee9fdc510a95b5d6de0c3e415",
      "size": 18813,
      "priority": "important"
    },
    "/js/watchers-common.js": {
      "checksum": "44cc578056cb32138f1a99d613a12633",
      "size": 407,
      "priority": "important"
    },
    "/lang/en.js": {
      "checksum": "a613800bae0e1b2e73add8f719340272",
      "size": 5689,
      "priority": "important"
    },
    "/mint/index.html": {
      "checksum": "73c43be41af75559fe6f62d37c708e3f",
      "size": 4258,
      "priority": "important"
    },
    "/new/360-gallery/index-expanded.html": {
      "checksum": "6a1fb25e4e9ecedc9444036d264df76c",
      "size": 16662,
      "priority": "important"
    },
    "/new/360-gallery/index.html": {
      "checksum": "4c2f4cfbf14726961db685c19b2c0471",
      "size": 10256,
      "priority": "important"
    },
    "/new/advanced/index.html": {
      "checksum": "241247f62af0f07334fcf9b4f6602a0a",
      "size": 34013,
      "priority": "important"
    },
    "/new/index.html": {
      "checksum": "f184826c41f38e1209d7a61fbf465ba6",
      "size": 43181,
      "priority": "important"
    },
    "/new/token/index.html": {
      "checksum": "cef1ab1b9fea2a91c627f9570738c5de",
      "size": 45310,
      "priority": "important"
    },
    "/nfts/create/index.html": {
      "checksum": "03778f5c95e40e680dd6c1b6d6309a7b",
      "size": 50768,
      "priority": "important"
    },
    "/nfts/index.html": {
      "checksum": "b30cfe79674b3b7e91f5392fe9635294",
      "size": 59063,
      "priority": "important"
    },
    "/nfts/old.html": {
      "checksum": "fc4093d6ef4aa3d8f29e9c81f34dfadb",
      "size": 120075,
      "priority": "important"
    },
    "/nfts/set/index.html": {
      "checksum": "54f1eb73c26f7480edb19e21fa64a57d",
      "size": 43225,
      "priority": "important"
    },
    "/nfts/sets/index.html": {
      "checksum": "f8522bbadcf9ac6f4d8112b8bca63b9b",
      "size": 9939,
      "priority": "important"
    },
    "/node/index.html": {
      "checksum": "b700ce842921bc856a27bb24eab5d321",
      "size": 12981,
      "priority": "important"
    },
    "/open.html": {
      "checksum": "902b0c3c4b34e27f0df076329353b481",
      "size": 5699,
      "priority": "important"
    },
    "/open/index.html": {
      "checksum": "14f053cf793e6b6d9a08ab1ccc8b41d4",
      "size": 5426,
      "priority": "important"
    },
    "/qr/index.html": {
      "checksum": "074b9226552c64ca4e585cf072ab2ea6",
      "size": 67648,
      "priority": "important"
    },
    "/reg-sw.js": {
      "checksum": "8c5e7c93055979f4c7208f56bc664540",
      "size": 7300,
      "priority": "important"
    },
    "/storage/index.html": {
      "checksum": "7495d5308f64220f83cc23e0137d97c5",
      "size": 12417,
      "priority": "important"
    },
    "/update.html": {
      "checksum": "31d6f64d57f21cd9492f2bfc62657e3c",
      "size": 11378,
      "priority": "important"
    },
    "/update/index.html": {
      "checksum": "8ab59538a55dcb50a2787af75975ff12",
      "size": 30809,
      "priority": "important"
    },
    "/user/detailmodal.html": {
      "checksum": "262ab96e38f539f099642c426038e677",
      "size": 88809,
      "priority": "important"
    },
    "/user/index.html": {
      "checksum": "7832b7e321488e5d4071d14e297952ce",
      "size": 301087,
      "priority": "important"
    },
    "/vid/stills/blue_dust.jpg": {
      "checksum": "9048079c05ff24442ab88599d7e8920f",
      "size": 63175,
      "priority": "important"
    },
    "/vid/stills/connected_dots.jpg": {
      "checksum": "48953804461101ec1d484b86193d9463",
      "size": 627998,
      "priority": "important"
    },
    "/vid/stills/data_lake.jpg": {
      "checksum": "9330f312da73d45ae0c6d503ebaa35aa",
      "size": 452432,
      "priority": "important"
    },
    "/vid/stills/floating_abstract.jpg": {
      "checksum": "b57ba5c015102610c3f1844c79d432e3",
      "size": 274779,
      "priority": "important"
    },
    "/vid/stills/glowing_hexagon.jpg": {
      "checksum": "c4c67dd6fe719ebd2b56cc2d6a66157e",
      "size": 260964,
      "priority": "important"
    },
    "/vid/stills/gold_wave.jpg": {
      "checksum": "1b610f7ec6798a0c2ef1215791f49f88",
      "size": 521372,
      "priority": "important"
    },
    "/vid/stills/orange_cube.jpg": {
      "checksum": "3917fc5c39d416fc084c46d06c480a4b",
      "size": 631596,
      "priority": "important"
    },
    "/vr/index.html": {
      "checksum": "af23926e6aa73e55a7d853f014dde3d3",
      "size": 89688,
      "priority": "important"
    },
    "/vr/vue.html": {
      "checksum": "6a79a38b2ea49ca30ff547563f9f1efd",
      "size": 1218,
      "priority": "important"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/scala/scala.js": {
      "checksum": "e33d235fff5d6bec204fdaf45d611b3f",
      "size": 8143,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/scheme/scheme.js": {
      "checksum": "8459a684a953f7b5bd65752606f700ce",
      "size": 2594,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/scss/scss.js": {
      "checksum": "3c3637405e97f0f06e042c840458359d",
      "size": 7232,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/shell/shell.js": {
      "checksum": "e36a3dc8ecd853ce86ef6d47130db580",
      "size": 3898,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/solidity/solidity.js": {
      "checksum": "bfdd1ec8b7391d0dcb81b9635d251f5e",
      "size": 19428,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/sophia/sophia.js": {
      "checksum": "122424f290eebd8629588833320d7b50",
      "size": 3591,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/sparql/sparql.js": {
      "checksum": "b4fbde148a69c3fca7c0690ca3bc84d0",
      "size": 3379,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/sql/sql.js": {
      "checksum": "702278cfb52c5545c2ad56e8e90870a4",
      "size": 11118,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/st/st.js": {
      "checksum": "d809dd5b6e4a1c7212861e3341738836",
      "size": 8222,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/swift/swift.js": {
      "checksum": "076c5207d2316b08adde022e0d5f0273",
      "size": 5997,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/systemverilog/systemverilog.js": {
      "checksum": "8321b50b1bdb4ade6e6b04f38f6f06ce",
      "size": 8444,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/tcl/tcl.js": {
      "checksum": "338956439f15f093079f1e021fb5f775",
      "size": 4392,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/twig/twig.js": {
      "checksum": "d137c03322f5585a021df82c3457adb9",
      "size": 6796,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/typescript/typescript.js": {
      "checksum": "2928d1f58d63f1ca29dfe4e0eb116dd2",
      "size": 6460,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/typespec/typespec.js": {
      "checksum": "3ea4220c40ac4d11038a4343895f42c5",
      "size": 3627,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/vb/vb.js": {
      "checksum": "954c16b916d419d910d6e0d04a77c8fb",
      "size": 6610,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/wgsl/wgsl.js": {
      "checksum": "30446e49687b9c62da94e0d7fd9e8a6d",
      "size": 8146,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/xml/xml.js": {
      "checksum": "17d082989dab3222da1b3c268c5d9cc8",
      "size": 3452,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/basic-languages/yaml/yaml.js": {
      "checksum": "5e1913f1f8de1694eeb42e7ba2323eaf",
      "size": 5056,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/editor/editor.main.css": {
      "checksum": "77292b9ceb0cf21d9c34fdcf95b9b356",
      "size": 131858,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/editor/editor.main.js": {
      "checksum": "8216718a32af36c4cb9484476d428d08",
      "size": 3766654,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/language/css/cssMode.js": {
      "checksum": "c116d50b0b63ce239bac1f764f38c7f8",
      "size": 33094,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/language/css/cssWorker.js": {
      "checksum": "0f28cabc4e103f7f5011048887c0aa28",
      "size": 778035,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/language/html/htmlMode.js": {
      "checksum": "c8d05bfbd0ee3e74b9377afc77413d14",
      "size": 33634,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/language/html/htmlWorker.js": {
      "checksum": "2b4df49b1af87a53c554d7a0ee99ed3e",
      "size": 449070,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/language/json/jsonMode.js": {
      "checksum": "e4b39dc9f8ce3da292bc86121b9cb804",
      "size": 42545,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/language/json/jsonWorker.js": {
      "checksum": "967a0435896e2a1ef60866f159cf3002",
      "size": 131177,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/language/typescript/tsMode.js": {
      "checksum": "db3710a236b6ebf3f75715f782fd9fcd",
      "size": 23919,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/language/typescript/tsWorker.js": {
      "checksum": "8ad7f367030861562122593f237c8ce2",
      "size": 5749518,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/loader.js": {
      "checksum": "bb6e6a026f04f24eab30a3924c8ccd30",
      "size": 30051,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.de.js": {
      "checksum": "cd01fdaf9e23b2da4de6c7628b06e6b3",
      "size": 119967,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.es.js": {
      "checksum": "e55051c17fde8e3a33086d9cf68e5be1",
      "size": 120624,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.fr.js": {
      "checksum": "1cf35e528d2a195c0e2a1eb91513a5bb",
      "size": 133124,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.it.js": {
      "checksum": "98ef8649994cd402d6d53bc4a63febb5",
      "size": 122202,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.ja.js": {
      "checksum": "98f4b971bbb23837904e3bc9abed163f",
      "size": 256463,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.ko.js": {
      "checksum": "4b68407fd9261ca0a0d9bc946ee0e5e1",
      "size": 210086,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.ru.js": {
      "checksum": "0f19eddfec0719f5f559c68e0f17319f",
      "size": 538578,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.zh-cn.js": {
      "checksum": "73423967cc7656f344cf497626de181f",
      "size": 157372,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-editor/vs/nls.messages.zh-tw.js": {
      "checksum": "c2f89eb94f2e306e530fa37591fdc5a2",
      "size": 161126,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-proxy.js": {
      "checksum": "412e79a5731df84cd19fb52ba8d5d1b0",
      "size": 1741,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-test-simple.html": {
      "checksum": "ba71f9da3bb13e1af2b417758efcb501",
      "size": 5495,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-test.html": {
      "checksum": "de4d36aa4bd6e4c88edcc0788f2544df",
      "size": 5544,
      "priority": "page-specific"
    },
    "/naf-playground/monaco-worker-setup.js": {
      "checksum": "39b0f159b48d4e97940a76342e32fddc",
      "size": 1291,
      "priority": "page-specific"
    },
    "/naf-playground/scene-test.html": {
      "checksum": "f556898bea2ca823bca83978ce8f04b8",
      "size": 2353,
      "priority": "page-specific"
    },
    "/naf-playground/test-video.html": {
      "checksum": "1ba32579515f864ae6bdf65ba09b3384",
      "size": 2292,
      "priority": "page-specific"
    },
    "/playground/copy.html": {
      "checksum": "eaa6a972fcae4bb48121274d44b29367",
      "size": 2450,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/arches.png": {
      "checksum": "459b3df0b2d88977b2358145393e6055",
      "size": 208709,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/checkerboard.png": {
      "checksum": "1473de04fe511fef22cd990f317b5201",
      "size": 106971,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/contact.png": {
      "checksum": "7901857a96f276920a9acc64d6a575fc",
      "size": 134045,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/default.png": {
      "checksum": "0b47acc6325bdbae72559e198f6169a8",
      "size": 117008,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/dream.png": {
      "checksum": "632127c42e2c92db1bce11add6499e41",
      "size": 113290,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/egypt.png": {
      "checksum": "e6c56b2e49a158fecd2a614e063596a0",
      "size": 142240,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/forest.png": {
      "checksum": "2b53f99d17a713efa0d95a5eef2df8e5",
      "size": 140445,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/goaland.png": {
      "checksum": "03b96c7628fec3f7c7e9a6cca11077d9",
      "size": 132405,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/goldmine.png": {
      "checksum": "45fe056e75d02ac5de7b498c380477d5",
      "size": 85126,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/japan.png": {
      "checksum": "889f67a76786bf74408d6c3f4b8f78b8",
      "size": 132145,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/moon.png": {
      "checksum": "ee9ab8dd48a85e181896158dcdd522f3",
      "size": 211072,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/none.png": {
      "checksum": "f5dee31316fd9060eea8f8134918c28f",
      "size": 35892,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/osiris.png": {
      "checksum": "6e6d7f2537262ae090f61f1f967a8ee5",
      "size": 147567,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/poison.png": {
      "checksum": "7c827e4377e8848cbb2ad07162169409",
      "size": 49060,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/starry.png": {
      "checksum": "91e683aa6abe9825904483052a0f2d69",
      "size": 213614,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/threetowers.png": {
      "checksum": "c24c3d56a600787acda2af591ea761af",
      "size": 147229,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/tron.png": {
      "checksum": "1d86d459dce615cd1fcf66025d7fd63c",
      "size": 129691,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/volcano.png": {
      "checksum": "651fe82ed29f36db7d40f8b2cf207b45",
      "size": 141300,
      "priority": "page-specific"
    },
    "/playground/env_thumbs/yavapai.png": {
      "checksum": "2da358421be2ed384564de674057084a",
      "size": 163708,
      "priority": "page-specific"
    },
    "/playground/fogworking.html": {
      "checksum": "413efc9ef654d7ede63343cd7d05dc7b",
      "size": 166805,
      "priority": "page-specific"
    },
    "/playground/index-monaco-fixed.html": {
      "checksum": "ecbec4f3b2888e6f210ea7dea276ba76",
      "size": 126958,
      "priority": "page-specific"
    },
    "/playground/index-monaco.html": {
      "checksum": "47a6abd2dce5936141b91deceac7514e",
      "size": 69240,
      "priority": "page-specific"
    },
    "/playground/index.html": {
      "checksum": "6325238a52aa1c7b365abfdd036696de",
      "size": 48605,
      "priority": "page-specific"
    },
    "/playground/last-try.html": {
      "checksum": "a64809066d4ff41d60aebe9a57d17b72",
      "size": 7021,
      "priority": "page-specific"
    },
    "/playground/new.html": {
      "checksum": "503b8d7cc8ca7a145a6b3680d89aaa51",
      "size": 21317,
      "priority": "page-specific"
    },
    "/packages/core/package/dist/umd/ffmpeg-core.js": {
      "checksum": "no-hash-symlink",
      "size": 0,
      "priority": "lazy"
    },
    "/packages/ffmpeg/package/dist/umd/ffmpeg-core.wasm": {
      "checksum": "no-hash-symlink",
      "size": 0,
      "priority": "lazy"
    }
  }
}
;
